"""
Snakefile for demultiplexing 16S sequence
files using QIIME1 on HTCF

Rachel Rodgers, Dec 2020
"""

import os
import sys

#sys.path.append("./workflow/scripts/snakemake_helpers")
sys.path.append(os.path.join("workflow", "scripts", "snakemake_helpers"))

from snakemake_helpers import *

#----- Snakemake Set Up -----#

#configfile: "./config/demux_config.yaml"
configfile: os.path.join("config", "demux_config.yaml")

# Barcode Information
bc1_len = config["Barcodes"]["BC1_len"]
bc2_len = config["Barcodes"]["BC2_len"]
rev_bc1 = config["Barcodes"]["rev_BC1"]
bc_type = config["Barcodes"]["BC_type"]

# Paths
MAP = config["Paths"]["Map"]
READDIR = config["Paths"]["Reads"]

# Tools
qiime = config["Tools"]["qiime"]

#----- Write Extract Barcodes Command-----#
#extractCommand = open("./workflow/scripts/extractCommand.sh", "w")
extractCommand = open(os.path.join("workflow", "scripts", "extractCommand.sh"), "w")

#barcode1 = "results/concatenated/concatenated_I1.fastq.gz"
#barcode2 = "results/concatenated/concatenated_I2.fastq.gz"
#barcodesOut = "results/barcodes"

barcode1 = os.path.join("results", "concatenated", "concatenated_I1.fastq.gz")
barcode2 = os.path.join("results", "concatenated", "concatenated_I2.fastq.gz")
barcodesOut = os.path.join("results", "barcodes")

cmdStr = ""

if rev_bc1 == True:
	cmdStr = "extract_barcodes.py --input_type barcode_paired_end -f " + barcode1 + " -r " + barcode2 + " --bc1_len " + str(bc1_len) + " --bc2_len " + str(bc2_len) + " -o " + barcodesOut + " --rev_comp_bc1"
else:
	cmdStr = "extract_barcodes.py --input_type barcode_paired_end -f " + barcode1 + " -r " + barcode2 + " --bc1_len " + str(bc1_len) + " --bc2_len " + str(bc2_len) + " -o " + barcodesOut	

extractCommand.write(cmdStr)
extractCommand.close()

#----- Rename input files -----#

rename_files(config)

SAMPLES, = glob_wildcards(os.path.join(READDIR, "renamed", "{sample}_R1.fastq.gz"))

PATTERN_R1 = "{sample}_R1"
PATTERN_R2 = "{sample}_R2"
PATTERN_I1 = "{sample}_I1"
PATTERN_I2 = "{sample}_I2"

#----- Snakemake Workflow -----#

rule all:
	input:
		directory(os.path.join("results", "split_samples_R1")),
		directory(os.path.join("results", "split_samples_R2"))

rule concatenate:
	input:
		r1 = expand(os.path.join(READDIR, "renamed", PATTERN_R1 + ".fastq.gz"), sample = SAMPLES),
		r2 = expand(os.path.join(READDIR, "renamed", PATTERN_R2 + ".fastq.gz"), sample = SAMPLES),
		i1 = expand(os.path.join(READDIR, "renamed", PATTERN_I1 + ".fastq.gz"), sample = SAMPLES),
		i2 = expand(os.path.join(READDIR, "renamed", PATTERN_I2 + ".fastq.gz"), sample = SAMPLES)
	output:
		r1 = os.path.join("results", "concatenated", "concatenated_R1.fastq.gz"),
		r2 = os.path.join("results", "concatenated", "concatenated_R2.fastq.gz"),
		i1 = os.path.join("results", "concatenated", "concatenated_I1.fastq.gz"),
		i2 = os.path.join("results", "concatenated", "concatenated_I2.fastq.gz")
	shell:
		"""
		cat {input.r1} > {output.r1}
		cat {input.r2} > {output.r2}
		cat {input.i1} > {output.i1}
		cat {input.i2} > {output.i2}
		"""

rule extract_barcodes:
	input:
		i1 = os.path.join("results", "concatenated", "concatenated_I1.fastq.gz"),
		i2 = os.path.join("results", "concatenated", "concatenated_I2.fastq.gz")
	params:
		outdir = os.path.join("results", "barcodes")
	output:
		os.path.join("results", "barcodes", "barcodes.fastq")
	shell:
		"""
		ml qiime
		bash ./workflow/scripts/extractCommand.sh
		"""

rule demultiplex_R1:
	input:
		r1 = os.path.join("results", "concatenated", "concatenated_R1.fastq.gz"),
		bc = os.path.join("results", "barcodes", "barcodes.fastq")
	params:
		outdir = os.path.join("results", "demultiplexed_R1")
	output:
		os.path.join("results", "demultiplexed_R1", "seqs.fastq")
	shell:
		"""
		ml qiime
		split_libraries_fastq.py \
			-i {input.r1} \
			-b {input.bc} \
			-o {params.outdir} \
			-m {MAP} \
			--barcode_type {bc_type} \
			--store_demultiplexed_fastq \
			-r 999 -n 999 -q 0 -p 0.001
		"""

rule demultiplex_R2:
	input:
		r2 = os.path.join("results", "concatenated", "concatenated_R2.fastq.gz"),
		bc = os.path.join("results", "barcodes", "barcodes.fastq")
	params:
		outdir = os.path.join("results", "demultiplexed_R2")
	output:
		os.path.join("results", "demultiplexed_R2", "seqs.fastq")
	shell:
		"""
		ml qiime
		split_libraries_fastq.py \
			-i {input.r2} \
			-b {input.bc} \
			-o {params.outdir} \
			-m {MAP} \
			--barcode_type {bc_type} \
			--store_demultiplexed_fastq \
			--rev_comp \
			-r 999 -n 999 -q 0 -p 0.001
		"""
		
rule split_demux_R1:
	input:
		os.path.join("results", "demultiplexed_R1", "seqs.fastq")
	output:
		outdir = directory(os.path.join("results", "split_samples_R1")),
		fin = os.path.join("results", "split_simples_R1", "finished.txt")
	shell:
		"""
		ml qiime

		split_sequence_file_on_sample_ids.py \
			-i {input} \
			-o {output.outdir} \
			--file_type fastq

		touch {output.fin}
		"""

rule split_demux_R2:
	input:
		os.path.join("results", "demultiplexed_R2", "seqs.fastq"),
	output:
		outdir = directory(os.path.join("results", "split_samples_R2")),
		fin = os.path.join("results", "split_samples_R2", "finished.txt")
	shell:
		"""
		ml qiime

		split_sequence_file_on_sample_ids.py \
			-i {input} \
			-o {output.outdir} \
			--file_type fastq

		touch {output.fin}
		"""

rule edit_extensions:
	input:
		r1Fin = os.path.join("results", "split_samples_R1", "finished.txt"),
		r2Fin = os.path.join("results", "split_samples_R2", "finished.txt")
	output:
		r1Out = directory(os.path.join("results", "split_samples_R1", "renamed_R1")),
		r2Out = directory(os.path.join("results", "split_samples_R2", "renamed_R2"))
	shell:
		"""
		rename 's/\.fastq$/_R1.fastq/' ./results/split_samples_R1/*fastq 
		mv ./results/split_samples_R1/*_R1.fastq ./results/split_samples_R1/renamed_R1/

		rename 's/\.fastq$/_R2.fastq/' ./results/split_samples_R2/*fastq
		mv ./results/split_samples_R2/*_R2.fastq ./results/split_samples_R2/renamed_R2/
		"""